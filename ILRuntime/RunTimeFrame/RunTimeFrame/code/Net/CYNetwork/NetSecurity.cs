//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18408
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Runtime.InteropServices;
using System.Text;
using System.Security.Cryptography;
using System.IO;
using System.IO.Compression;

namespace CYNetwork
{

	
	 /// <summary>
     ///  该类对网络字节流进行加密，解密操作
	 /// </summary>
	public class NetSecurity
	{



		public NetSecurity ()
		{

		}

        public static string GetMD5(string myString)
        {
            //MD5 md5 = MD5.Create();
            MD5 md5 = new MD5CryptoServiceProvider();

            byte[] s = md5.ComputeHash(Encoding.Default.GetBytes(myString));
            StringBuilder md5Str = new StringBuilder(32);

            for (int i = 0; i < s.Length; i++)
                md5Str.Append(s[i].ToString("x2"));
            return md5Str.ToString();
        }
        // 压缩文件
        public static byte[] Compress(byte[] inputBytes,int size)
        {
            //using (MemoryStream outStream = new MemoryStream())
            //{
            //    using (GZipStream zipStream = new GZipStream(outStream, CompressionMode.Compress, true))
            //    {
            //        zipStream.Write(inputBytes, 0, size);
            //        zipStream.Close(); //很重要，必须关闭，否则无法正确解压
            //        return outStream.ToArray();
            //    }
            //}
            //MemoryStream ms = new MemoryStream();
            //GZipOutputStream gzip = new GZipOutputStream(ms);
            //gzip.Write(inputBytes, 0, size);
            //gzip.Close();
            //return ms.ToArray();
            return null;
        }
        // 解压文件
        public static byte[] Decompress(byte[] inputBytes)
        {
            //using (MemoryStream inputStream = new MemoryStream(inputBytes))
            //{
            //    using (MemoryStream outStream = new MemoryStream())
            //    {
            //        using (GZipStream zipStream = new GZipStream(inputStream, CompressionMode.Decompress))
            //        {
            //            zipStream.CopyTo(outStream);
            //            zipStream.Close();
            //            return outStream.ToArray();
            //        }
            //    }
            //}
            return null;
        }

       
	}
}

